#!/usr/bin/env python2.4


import sys
import os
from os import path
import getopt
import shutil
import logging

sys.path.append('/usr/local/dnssec/lib')
import utils
import inl 
import rpc
import db
import conf
import zone
import M2Crypto.EVP as evp
import M2Crypto.X509 as x509


START_DIR = ''

class OptException(Exception):
	pass


err = sys.stderr
def help(action=None):
	if action == None or not ACTIONS.has_key(action):
		err.write("%s command [options]\navailable commands are:\n"\
			% path.basename(sys.argv[0]))
		l = ACTIONS.keys()
		l.sort()
		for k in l:
			err.write(" %s\n"%(k,))
		err.write(" help\n")
		return
	err.write("%s %s [options]\n"%(path.basename(sys.argv[0]),action))
	err.write(ACTIONS[action][0].__doc__)

def run_in_dir(dir,callback,*args,**kargs):
	oldcwd = os.getcwd()
	os.chdir(dir)
	try:
		return callback(*args,**kargs)
	finally:
		os.chdir(oldcwd)
	
def show_domains(command,opts,args):
	"""show configured domains
"""
	domains = conf.getdomains()
	for d in domains:
		print d

def check_req_opts(opts,optstring):
	for c in optstring:
		if '-'+c not in opts:
			raise OptException('require -'+c+' option')
	
def check_domain(domain):
	domains = conf.getdomains()
	if domain not in domains:
		raise OptException("domain %s isn't configured" % (domain,))
	

def init_domain(command,opts,args):
	"""initialize domain structure 
required options:
 -d domain : domain to be initialized
optional options:
 -f : force to reinitialize
"""
	check_req_opts(opts,'d')
	domain = opts['-d']
	check_domain(domain)
	c = conf.get(domain)
	if path.isdir(c['dir']):
		if opts.has_key('-f'):
			shutil.rmtree(c['dir'])
		else:
			raise OptException(\
				'domain %s exists, use -f to reinitialize (all data lost!!)'\
				% (domain,))
	os.mkdir(c['dir'])	
	os.mkdir(path.join(c['dir'],conf.KEYSET_DIR))
	os.mkdir(path.join(c['dir'],conf.KEY_DIR))
	os.mkdir(path.join(c['dir'],conf.DB_DIR))
	f = open(path.join(c['dir'],conf.LOCK_FILE),'w')
	f.close()
	db.init_db(domain)
	ddb = db.get_ddb(domain)
	for k in inl.DEFAULTS:
		ddb[k] = inl.DEFAULTS[k]
	ddb.sync()
	
	
def show_keys(command,opts,args):
	"""show keys for domain
required options:
 -d domain : domain to be showed
optional options:
 -k : show domain ksk
 -z : show domain zsk
 -c : show child domain ksk
"""
	check_req_opts(opts,'d')
	domain = opts['-d']
	check_domain(domain)
	db.open_db(domain)
	ddb = db.get_ddb(domain)
	kdb = db.get_kdb(domain)
	def sk(l):
		for k in l:
			print str(kdb[k])
	if opts.has_key('-k'):
		if ddb[inl.act_ksk]:
			sk([ddb[inl.act_ksk]])
		if ddb[inl.pub_ksk]:
			sk([ddb[inl.pub_ksk]])
		sk(ddb[inl.dea_ksks])
	if opts.has_key('-z'):
		if ddb[inl.act_zsk]:
			sk([ddb[inl.act_zsk]])
		if ddb[inl.pub_zsk]:
			sk([ddb[inl.pub_zsk]])
		if ddb[inl.del_zsk]:
			sk([ddb[inl.del_zsk]])
		sk(ddb[inl.dea_zsks])
	if opts.has_key('-c'):
		sk(ddb[inl.pub_chld_ksks])
		sk(ddb[inl.wat_chld_ksks])


def create_key(command,opts,args):
	"""create domain key
required options:
 -d domain : domain to be showed
optional options:
 -k : create KSK
 -b bits : key length [512-4096] default 1024 bits
"""	
	check_req_opts(opts,'d')
	domain = opts['-d']
	check_domain(domain)

	ksk = False
	if opts.has_key('-k'):
		ksk = True
	bits = 1024
	if opts.has_key('-b'):
		try:
			bits = int(opts['-b'])
		except ValueError:
			raise OptException('bits should be int')

	db.open_db(domain)
	kdb = db.get_kdb(domain)
	ddb = db.get_ddb(domain)
	key = zone.create_key(domain,bits,ksk)
	kdb[key.keyname] = key
	kdb.sync()
	if(ksk):
		dea = inl.dea_ksks
	else:
		dea = inl.dea_zsks
	ks = ddb[dea] 
	ks.append(key.keyname)
	ddb[dea] = ks
	ddb.sync()

def roll_zsk(command,opts,args):
	"""start to roll zsk
required options:
 -d domain : domain to be used
 -n newkeyname : key name of the new key to be actived
"""
	check_req_opts(opts,'dn')
	domain = opts['-d']
	check_domain(domain)

	db.open_db(domain)
	
	ddb = db.get_ddb(domain)
	oldkeyname = ddb[inl.act_zsk]
	oldkey = None
	newkeyname = opts['-n']

	try:
		kdb = db.get_kdb(domain)
		if oldkeyname is not None:
			oldkey = kdb[oldkeyname]
		newkey = kdb[newkeyname]
	except KeyError,e:
		raise OptException('key ' + str(e) + " doesn't exist")
	if newkeyname not in ddb[inl.dea_zsks]:
		raise OptException("new key is not deactive key")
	if ddb[inl.zsk_roll_stat] != inl.ZSK_STAT_NORMAL:
		raise OptException("another zsk rollover is in progress")
	if ddb[inl.ksk_roll_stat] != inl.KSK_STAT_NORMAL:
		raise OptException("another ksk rollover is in progress")

	ttl = int(conf.get(domain)['ttl'])
	zsk_life = int(conf.get(domain)['zsk_life'])
	sync_time = int(conf.get(domain)['sync_time'])

	now = utils.inttime()
	if oldkey:
		oldkey.end_time = now + (ttl+sync_time+10)*2
		newkey.start_time = now
		newkey.active_time = now + (ttl+sync_time+10)
		newkey.end_time = now + zsk_life
		kdb[oldkeyname] = oldkey
		kdb[newkeyname] = newkey
		dea = ddb[inl.dea_zsks]
		dea.remove(newkeyname)
		ddb[inl.dea_zsks] = dea
		ddb[inl.pub_zsk] = newkeyname
		ddb[inl.zsk_roll_stat] = inl.ZSK_STAT_TOPUB
	else:
		newkey.start_time = now
		newkey.active_time = now
		newkey.end_time = now + zsk_life
		newkey.status = zone.KEY_PUBLISHED
		kdb[newkeyname] = newkey
		dea = ddb[inl.dea_zsks]
		dea.remove(newkeyname)
		ddb[inl.pub_zsk] = newkeyname
		ddb[inl.dea_zsks] = dea
		ddb[inl.zsk_roll_stat] = inl.ZSK_STAT_TOACT
	kdb.sync()
	ddb.sync()

def set_zsk(command, opts, args):
	"""set a key as active zsk, used it as initial process
required options:
 -d domain : domain to be used
 -n newkeyname : key name of the new key to be actived
"""
	check_req_opts(opts,'dn')
	domain = opts['-d']
	check_domain(domain)

	db.open_db(domain)
	
	ddb = db.get_ddb(domain)

	if ddb[inl.act_zsk] != None:
		raise OptException("command only used to set initial zsk")

	oldkey = None
	newkeyname = opts['-n']

	try:
		kdb = db.get_kdb(domain)
		newkey = kdb[newkeyname]
	except KeyError,e:
		raise OptException('key ' + str(e) + " doesn't exist")
	if newkeyname not in ddb[inl.dea_zsks]:
		raise OptException("new key is not deactive key")
	if ddb[inl.zsk_roll_stat] != inl.ZSK_STAT_NORMAL:
		raise OptException("another zsk rollover is in progress")
	if ddb[inl.ksk_roll_stat] != inl.KSK_STAT_NORMAL:
		raise OptException("another ksk rollover is in progress")
	
	ttl = int(conf.get(domain)['ttl'])
	zsk_life = int(conf.get(domain)['zsk_life'])
	sync_time = int(conf.get(domain)['sync_time'])

	now = utils.inttime()
	newkey.start_time = now
	newkey.active_time = now
	newkey.end_time = now + zsk_life
	newkey.status = zone.KEY_ACTIVE
	kdb[newkeyname] = newkey
	dea = ddb[inl.dea_zsks]
	dea.remove(newkeyname)
	ddb[inl.act_zsk] = newkeyname
	ddb[inl.dea_zsks] = dea
	kdb.sync()
	ddb.sync()


def rm_key(command, opts, args):
	"""remove specified key. 
only deactive keys and all child zone keys can be removed 
required options:
-d domain : domain to be used
-n keyname : key to be removed
"""
	check_req_opts(opts,'dn')
	domain = opts['-d']
	check_domain(domain)
	db.open_db(domain)
	ddb = db.get_ddb(domain)
	kdb = db.get_kdb(domain)
	keyname = opts['-n']
	if keyname in ddb[inl.dea_ksks]:
		dea = ddb[inl.dea_ksks]
		dea.remove(keyname)
		ddb[inl.dea_ksks] = dea
		kdb[keyname].remove_files()
		del kdb[keyname]
		ddb.sync()
		kdb.sync()
		return 
	if keyname in ddb[inl.dea_zsks]:
		dea = ddb[inl.dea_zsks]
		dea.remove(keyname)
		ddb[inl.dea_zsks] = dea
		kdb[keyname].remove_files()
		del kdb[keyname]
		ddb.sync()
		kdb.sync()
		return 
	if keyname in ddb[inl.pub_chld_ksks]:
		dea = ddb[inl.pub_chld_ksks]
		dea.remove(keyname)
		ddb[inl.pub_chld_ksks] = dea
		kdb[keyname].remove_files()
		del kdb[keyname]
		ddb.sync()
		kdb.sync()
		return 
	if keyname in ddb[inl.wat_chld_ksks]:
		dea = ddb[inl.wat_chld_ksks]
		dea.remove(keyname)
		ddb[inl.wat_chld_ksks] = dea
		kdb[keyname].remove_files()
		del kdb[keyname]
		ddb.sync()
		kdb.sync()
		return 
	raise OptException('no such key ' + keyname)

#def import_keys(command,opts,args):
	

		
def show_internal(command,opts,args):
	"""show internal status
required options:
 -d domain : domain to be used
"""	
	check_req_opts(opts,'d')
	domain = opts['-d']
	check_domain(domain)
	db.open_db(domain)
	ddb = db.get_ddb(domain)
	keys = ddb.keys()
	keys.sort()
	def tr(s):
		return s.replace('.',': ').replace('_',' ')
	for k in keys:
		print tr(k),'=',ddb[k]

def set_ksk(command,opts,args):
	"""start to roll ksk
required options:
 -d domain : domain to be used
 -n newkeyname : key name of the new key to be actived
 -p private_key : private key used to update ksk in parent zone
"""
	check_req_opts(opts,'dn')
	domain = opts['-d']
	check_domain(domain)
	dc = conf.get(domain)
	is_root = (dc['is_root'] == 'yes')
	if not is_root:
		check_req_opts(opts,'p')
	db.open_db(domain)
	
	ddb = db.get_ddb(domain)
	if ddb[inl.act_ksk] != None:
		raise OptException("command only used to set initial ksk")
	oldkey = None
	newkeyname = opts['-n']

	try:
		kdb = db.get_kdb(domain)
		newkey = kdb[newkeyname]
	except KeyError,e:
		raise OptException('key ' + str(e) + " doesn't exist")
	if newkeyname not in ddb[inl.dea_ksks]:
		raise OptException("new key is not deactive key")
	if ddb[inl.ksk_roll_stat] != inl.KSK_STAT_NORMAL:
		raise OptException("another ksk rollover is in progress")
	if ddb[inl.zsk_roll_stat] != inl.ZSK_STAT_NORMAL:
		raise OptException("another zsk rollover is in progerss")
	
	ttl = int(dc['ttl'])
	ksk_life = int(dc['ksk_life'])
	sync_time = int(dc['sync_time'])

	try:
		if not is_root:
			pkey = run_in_dir(START_DIR,evp.load_key,opts['-p'])
			dnsrpc = rpc.DNSRPC(dc['parent_rpcurl'])
			roll_time = dnsrpc.update_ksk(newkey,pkey)
		else:
			roll_time = 0
	except rpc.RpcException, e:
		raise OptException('rpc call error: '+str(e))
	except Exception,e:
		logging.exception(e)
		raise OptException("can't load private key at "+opts['-p'])


	now = utils.inttime()
	newkey.start_time = now
	newkey.active_time = now
	newkey.end_time = now + ksk_life
	newkey.status = zone.KEY_ACTIVE
	kdb[newkeyname] = newkey
	dea = ddb[inl.dea_ksks]
	dea.remove(newkeyname)
	ddb[inl.act_ksk] = newkeyname
	ddb[inl.dea_ksks] = dea
	kdb.sync()
	ddb.sync()


def roll_ksk(command,opts,args):
	"""start to roll ksk
required options:
 -d domain : domain to be used
 -n newkeyname : key name of the new key to be actived
 -p private_key : private key used to update ksk in parent zone
"""
	check_req_opts(opts,'dn')
	domain = opts['-d']
	check_domain(domain)
	dc = conf.get(domain)
	is_root = (dc['is_root'] == 'yes')
	if not is_root:
		check_req_opts(opts,'p')
	db.open_db(domain)
	
	ddb = db.get_ddb(domain)
	oldkeyname = ddb[inl.act_ksk]
	oldkey = None
	newkeyname = opts['-n']

	try:
		kdb = db.get_kdb(domain)
		if oldkeyname is not None:
			oldkey = kdb[oldkeyname]
		newkey = kdb[newkeyname]
	except KeyError,e:
		raise OptException('key ' + str(e) + " doesn't exist")
	if newkeyname not in ddb[inl.dea_ksks]:
		raise OptException("new key is not deactive key")
	if ddb[inl.ksk_roll_stat] != inl.KSK_STAT_NORMAL:
		raise OptException("another ksk rollover is in progress")
	if ddb[inl.zsk_roll_stat] != inl.ZSK_STAT_NORMAL:
		raise OptException("another zsk rollover is in progerss")
	
	ttl = int(dc['ttl'])
	ksk_life = int(dc['ksk_life'])
	sync_time = int(dc['sync_time'])

	try:
		if not is_root:
			pkey = run_in_dir(START_DIR,evp.load_key,opts['-p'])
			dnsrpc = rpc.DNSRPC(dc['parent_rpcurl'])
			roll_time = dnsrpc.update_ksk(newkey,pkey)
		else:
			roll_time = 0
	except rpc.RpcException, e:
		raise OptException('rpc call error: '+str(e))
	except:
		raise OptException("can't load private key at "+opts['-p'])


	now = utils.inttime()
	if oldkey:
		oldkey.end_time = now + (ttl+sync_time+10)*2 + roll_time
		newkey.start_time = now
		newkey.active_time = now + (ttl+sync_time+10) + roll_time
		newkey.end_time = now + ksk_life
		kdb[oldkeyname] = oldkey
		kdb[newkeyname] = newkey
		dea = ddb[inl.dea_ksks]
		dea.remove(newkeyname)
		ddb[inl.dea_ksks] = dea
		ddb[inl.pub_ksk] = newkeyname
		ddb[inl.ksk_roll_stat] = inl.KSK_STAT_TOPUB
	else:
		newkey.start_time = now
		newkey.active_time = now
		newkey.end_time = now + ksk_life
		newkey.status = zone.KEY_PUBLISHED
		kdb[newkeyname] = newkey
		dea = ddb[inl.dea_ksks]
		dea.remove(newkeyname)
		ddb[inl.pub_ksk] = newkeyname
		ddb[inl.dea_ksks] = dea
		ddb[inl.ksk_roll_stat] = inl.KSK_STAT_TOACT
	kdb.sync()
	ddb.sync()


def set_crt(command,opts,args):
	"""upload x509 certification to pki system
required options:
-x cert_file: pem format x509 certification file path 
-d domain: domain signing the x509 certification
"""
	check_req_opts(opts,"dx")
	domain = opts['-d']
	check_domain(domain)
	dc = conf.get(domain)
	
	crt = x509.load_cert(opts['-x'])
	try:
		crt.verify()
	except:
		raise OptException(opts['-x']+' is not a valid x509 cert')
	try:
		dnsrpc = rpc.DNSRPC(dc['pki_rpcurl'])
		dnsrpc.set_x509_crt(crt)
	except Exception,e:
		raise OptException('rpc error: '+str(e))
def import_keys(command,opts,args):
	"""import keys in key_dir to domain
requried options:
 -d domain
 -i key_dir
"""
	check_req_opts(opts,'di')
	domain = opts['-d']
	check_domain(domain)
	dc = conf.get(domain)
	key_dir = opts['-i']
	if not path.isabs(key_dir):
		key_dir = path.join(START_DIR,key_dir)
	if not path.isdir(key_dir):
		raise OptException("can't not access key dir at "+key_dir)
	ddb = db.get_ddb(domain)
	kdb = db.get_kdb(domain)
	dea_zsks = ddb[inl.dea_zsks]
	dea_ksks = ddb[inl.dea_ksks]
	wat_chld_ksks = ddb[inl.wat_chld_ksks]
	import glob
	for keyfile in run_in_dir(key_dir,glob.glob,'*+*+*.key'):
		keyname = keyfile[1:-4]
		if kdb.has_key(keyname):
			print "duplicate key:",keyname
			continue
		keypath = path.join(key_dir,keyfile)
		newkeypath = path.join(dc['dir'],conf.KEY_DIR,keyfile)
		pripath = path.join(key_dir,keyfile[:-3]+'private')
		newpripath = path.join(dc['dir'],conf.KEY_DIR,keyfile[:-3]+'private')
		key = zone.Key(domain,keyname)
		if key.get_domain() == domain:
			shutil.copyfile(keypath,newkeypath)
			shutil.copyfile(pripath,newpripath)
			if key.is_ksk():
				dea_ksks.append(keyname)
				print "add",keyname,"as ksk"
			else:
				dea_zsks.append(keyname)
				print "add",keyname,"as zsk"
			kdb[keyname] = key
		elif key.get_domain().find('.') > -1 \
			and (key.get_domain().split(".",1))[1] == domain:
			shutil.copyfile(keypath,newkeypath)
			wat_chld_ksks.append(keyname)
			print "add",keyname,"as child ksk"
			kdb[keyname] = key
	ddb[inl.dea_zsks] = dea_zsks
	ddb[inl.dea_ksks] = dea_ksks
	ddb[inl.wat_chld_ksks] = wat_chld_ksks
	kdb.sync()
	ddb.sync()

def show_ips(command,opts,args):
	"""show all dynamic domain
requried options:
 -d domain
"""
	check_req_opts(opts,'d')
	domain = opts['-d']
	check_domain(domain)
	idb = db.get_idb(domain)
	for k in idb:
		print idb[k].desc()

def rm_ip(command,opts,args):
	"""remove specified subdomain from dynamic domain
requried options:
 -d domain
 -s subdomain
"""
	check_req_opts(opts,'ds')
	domain = opts['-d']
	subdomain = opts['-s']
	check_domain(domain)
	idb = db.get_idb(domain)
	ddb = db.get_ddb(domain)
	if idb.has_key(subdomain):
		del idb[subdomain]
		ddb[inl.last_ip_mtime] = utils.inttime()
		idb.sync()
		ddb.sync()
	else:
		raise OptException( subdomain + " is not found")

def update_ip(command,opts,args):
	"""update domian ip to DNS server
requried options:
 -d domain
 -p private_key
"""
	check_req_opts(opts,'dp')
	domain = opts['-d']
	check_domain(domain)
	dc = conf.get(domain)
	try:
		pkey = run_in_dir(START_DIR,evp.load_key,opts['-p'])
	except:
		raise OptException("can't load private key at "+opts['-p'])
	try:
		dnsrpc = rpc.DNSRPC(dc['parent_rpcurl'])
		duration = dnsrpc.update_ip(domain,pkey)
		print 'duration: %d sec' % (duration,)
	except Exception,e:
		raise OptException("rpc error: " + str(e))
	
ACTIONS = {
	'showdomains':(show_domains,""),
	'initdomain':(init_domain,"d:f"),
	'showkeys':(show_keys,"d:kzc"),
	'createkey':(create_key,"d:kb:"),
	'showinternal':(show_internal,"d:"),
	'rollzsk':(roll_zsk,"d:n:"),
	'setzsk':(set_zsk,"d:n:"),
	'rmkey':(rm_key,"d:n:"),
	'rollksk':(roll_ksk,"d:n:p:"),
	'setcrt':(set_crt,"d:x:"),
	'setksk':(set_ksk,"d:n:p:"),
	'importkeys':(import_keys,"d:i:"),
	'showips':(show_ips,"d:"),
	'rmip':(rm_ip,"d:s:"),
	'updateip':(update_ip,"d:p:"),
}




	
def main():
	if len(sys.argv) == 1:
		help()
		return
	command = sys.argv[1]
	if command == 'help':
		if len(sys.argv) > 2: 
			help(sys.argv[2])
		else:
			help()
	elif ACTIONS.has_key(command):
		try:
			opts,args = \
				getopt.getopt(\
				sys.argv[2:],ACTIONS[command][1])
		except getopt.GetoptError,e:
			err.write(str(e))
			err.write('\n')
			help(command)
			return
		opts = dict(opts)
		try:
			ACTIONS[command][0](command,opts,args)
		except OptException,e:
			err.write(str(e))
			err.write('\n')
			help(command)
			return
		except db.DBException,e:
			err.write(str(e))
			err.write('\n')
			help(command)
			return

	else:
		help()
		
if __name__ == '__main__':
	START_DIR = os.getcwd()
	utils.init()
	main()
	utils.final()
	
