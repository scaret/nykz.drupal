#!/usr/bin/env python2.4
import time
from SimpleXMLRPCServer import CGIXMLRPCRequestHandler
import sys
import logging
from os import path
import base64
import os

CONF_FILE = '/usr/local/dnssec/dnssec.ini'
sys.path.append('/usr/local/dnssec/lib')
import rpc
import cert
import utils
import zone
import conf
import inl
import db
import M2Crypto.X509 as x509


NORMAL = '0'
ERROR_TIME = '1'
ERROR_DOMAIN = '2'
ERROR_INTERNAL = '3'
ERROR_SIGNATURE = '4'
def xmlrpc(f):
	def wrapped(*args, **kwargs):
		try:
			return f(*args, **kwargs)
		except Exception,e :
			logging.exception(e)
			return {'code':ERROR_INTERNAL,'message':'internal error'}
	wrapped.__doc__ = f.__doc__
	return wrapped

class Funcs:
	version = '1'

	def __ts_intime(self,ts):
		try:
			now = utils.inttime()
			call_time = int(ts)
			if abs(now-call_time) > 60*5:
				return False
			else:
				return True
		except:
			return False
	
	def __get_verified_crt(self,dnsrpc,domain,trusted_crt):
		crt = dnsrpc.get_x509_crt(domain)
		if crt.verify(trusted_crt.get_pubkey()) == 1:
			return crt
		else:
			if domain == '.':
				return None
			sub,domain = domain.split('.',1)
			if domain == '':
				domain = '.'
			pcrt = self.__get_verified_crt(dnsrpc,domain,trusted_crt)
			if pcrt == None:
				return None
			if crt.verify(pcrt.get_pubkey()) == 1:
				return crt
			else:
				return None
	@xmlrpc	
	def getver(self,ts):
		if not self.__ts_intime(ts):
			return {'code':ERROR_TIME,'message':'wrong timestamp','version':''}
		return {'code':NORMAL,'message':'successful','version':self.version}
	@xmlrpc
	def getcrt(self,ts,domain):
		if not self.__ts_intime(ts):
			return (ERROR_TIME,'wrong timestamp','')
		f = file(path.join('/home/jawahh/code/jawahh/bind',domain+'crt'))
		all = f.read()
		f.close()
		return {'code':NORMAL,'message':'','crt':all}
	@xmlrpc
	def updateksk(self,timestamp,keyname,keycontent,signature):
		logging.debug(\
		'updateksk call: timestamp=%s, keyname=%s, keycontent=%s, signature=%s'\
		,timestamp,keyname,keycontent,signature)
		if not self.__ts_intime(timestamp):
			return {'code':ERROR_TIME,'message':'incorrect timestamp %d'%(calltime,),'roll_time':'0'}
		
		child_domain = keyname.split('+')[0].lower()
		if not utils.check_domain(child_domain):
			return {'code':ERROR_DOMAIN,'message':'unknown domain1 %s'%(child_domain,),'roll_time':'0'}
		domains = child_domain.split('.',1)
		if len(domains) != 2:
			return {'code':ERROR_DOMAIN,'message':'unknown domain2 %s'%(child_domain,),'roll_time':'0'}
		try:
			dc = conf.get(domains[1])
		except:
			return {'code':ERROR_DOMAIN,'message':'%s is not in control'%(child_domain,),'roll_time':'0'}
		if dc['enable_update_child_ksk'] != 'yes':
			return {'code':ERROR_DOMAIN,'message':'update child ksk is not enable','roll_time':'0'}
		signature = base64.standard_b64decode(signature)
		try:
			dnsrpc = rpc.DNSRPC(dc['pki_rpcurl'])	
			trusted_crt = cert.get_trusted_crt(domains[1])
			crt = self.__get_verified_crt(dnsrpc,child_domain,trusted_crt)
		except rpc.RpcException,e:
			return {'code':ERROR_INTERNAL,'message':'internal error','roll_time':'0'}
		child_pkey = crt.get_pubkey()
		child_pkey.verify_init()
		child_pkey.verify_update(timestamp)
		child_pkey.verify_update(keyname)
		child_pkey.verify_update(keycontent)
		if child_pkey.verify_final(signature) != 1:
			return {'code':ERROR_SIGNATURE,'message':'wrong signature','roll_time':'0'}
		kdb = db.get_kdb(domains[1])
		ddb = db.get_ddb(domains[1])
		ksk = zone.Key(domains[1],keyname)
		ksk.save_public_key(keycontent)
		def check_domain_exist(keynames):
			for keyname in keynames:
				if kdb[keyname].get_domain() == child_domain:
					return kdb[keyname]
			return None
		oldksk = check_domain_exist(ddb[inl.wat_chld_ksks])
		if oldksk:
			ks = ddb[inl.wat_chld_ksks]
			ks.remove(oldksk.keyname)
			ddb[inl.wat_chld_ksks] = ks
		else:
			oldksk =  check_domain_exist(ddb[inl.pub_chld_ksks])
			if oldksk:
				ks = ddb[inl.pub_chld_ksks]
				ks.remove(oldksk.keyname)
				ddb[inl.pub_chld_ksks] = ks
		ks = ddb[inl.wat_chld_ksks]
		ksk.start_time = utils.inttime()
		kdb[ksk.keyname] = ksk
		ks.append(ksk.keyname)
		ddb[inl.wat_chld_ksks] = ks
		ddb.sync()
		kdb.sync()
		ttl = int(dc['ttl'])
		sync_time = int(dc['sync_time'])
		return {'code':NORMAL,'message':'','roll_time':str(ttl+sync_time+10)}

	@xmlrpc
	def updateip(self,timestamp,child_domain,signature):
		if not self.__ts_intime(timestamp):
			return {'code':ERROR_TIME,'message':'incorrect timestamp %d'%(calltime,),'duration':'0'}
		child_domain = child_domain.lower()
		if not utils.check_domain(child_domain):
			return {'code':ERROR_DOMAIN,'message':'unknown domain1 %s'%(child_domain,),'duration':'0'}
		domains = child_domain.split('.',1)
		if len(domains) != 2:
			return {'code':ERROR_DOMAIN,'message':'unknown domain2 %s'%(child_domain,),'duration':'0'}
		try:
			dc = conf.get(domains[1])
		except:
			return {'code':ERROR_DOMAIN,'message':'%s is not in control'%(child_domain,),'duration':'0'}
		if dc['enable_dynamic_domain'] != 'yes':
			return {'code':ERROR_DOMAIN,'message':'dynamic domain is not enable','duration':'0'}
		signature = base64.standard_b64decode(signature)
		try:
			dnsrpc = rpc.DNSRPC(dc['pki_rpcurl'])	
			trusted_crt = cert.get_trusted_crt(domains[1])
			crt = self.__get_verified_crt(dnsrpc,child_domain,trusted_crt)
		except rpc.RpcException,e:
			return {'code':ERROR_INTERNAL,'message':'internal error','duration':'0'}
		child_pkey = crt.get_pubkey()
		child_pkey.verify_init()
		child_pkey.verify_update(timestamp)
		child_pkey.verify_update(child_domain)
		if child_pkey.verify_final(signature) != 1:
			return {'code':ERROR_SIGNATURE,'message':'wrong signature','duration':'0'}
		ddb = db.get_ddb(domains[1])
		idb = db.get_idb(domains[1])
		now = utils.inttime()
		duration = int(dc['dynamic_domain_duration'])
		ip = zone.IP(child_domain,os.environ['REMOTE_ADDR'],now+duration)
		idb[child_domain] = ip
		ddb[inl.last_ip_mtime] = now
		idb.sync()
		ddb.sync()
		return {'code':NORMAL,'message':'successful','duration':str(duration)}

def main():
	conf._readconf(CONF_FILE)
	utils.init()
	try:
		handler = CGIXMLRPCRequestHandler()
		handler.register_instance(Funcs())
		handler.handle_request()
	except Exception,e:
		logging.exception(e)
	utils.final()

if __name__ == '__main__':
	main()
