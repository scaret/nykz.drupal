#!/usr/bin/env python2.4

import os
import os.path as path
import sys
import logging
import shutil
import fcntl
import stat


sys.path.append('/usr/local/dnssec/lib')
import zone
import db
import conf
import inl
import utils


class SignException(Exception):
	pass

def sign_zone(domain,ksk,zsk,chld_ksks,ksk2=None,pub_zsk=None,dynamic_ips=[]):

	def gen_keysets(keys,ksdir,ttl):
		for k in keys:
			fpath = path.join(ksdir,k.get_keyset_name())
			f = file(fpath,'w')
			f.write(k.gen_keyset_format(ttl))
			f.write('\n')
			f.close()

	def patch_keys(zonefile,keys,keydir):
		f = file(zonefile,'a')
		for key in keys:
			keypath = path.join(keydir,key.get_public_name())
			f.write('\n$INCLUDE %s'%(keypath,))
		f.write('\n')
		f.close()
	
	def patch_ips(zonefile,ips):
		f = file(zonefile,'a')
		for ip in ips:
			f.write('\n%s'%(str(ip),))
		f.write('\n')
		f.close()
	
	logging.info('start signing %s',domain)
	logging.info('active ksk: %s',ksk.keyname)
	logging.info('active zsk: %s',zsk.keyname)
	if ksk2:
		logging.info('second ksk: %s',ksk2.keyname)
	if pub_zsk:
		logging.info('publish zsk: %s', pub_zsk.keyname)
	logging.info('publish child ksks: %s',str(chld_ksks))
	dc = conf.get(domain)
	c = conf.get()
	ksdir = path.join(dc['dir'],conf.KEYSET_DIR)
	ttl = int(dc['ttl'])
	gen_keysets(chld_ksks,ksdir,ttl)
	oldzone = path.join(dc['dir'],'_zone.%s'%(domain,))
	newzone = path.join(dc['dir'],'_zone.%s.signed'%(domain,))
	if path.isfile(oldzone):
		os.remove(oldzone)
	if path.isfile(newzone):
		os.remove(newzone)
	shutil.copy(dc['input_zonepath'],oldzone)
	keys = [ksk,zsk]
	if ksk2:
		keys.append(ksk2)
	if pub_zsk:
		keys.append(pub_zsk)
	keydir = path.join(dc['dir'],conf.KEY_DIR)

	patch_ips(oldzone,dynamic_ips)
	patch_keys(oldzone,keys,keydir)

	ksk_keypath = path.join(keydir,'K'+ksk.keyname)
	if ksk2:
		ksk2_keypath = path.join(keydir,'K'+ksk2.keyname)
	zsk_keypath = path.join(keydir,'K'+zsk.keyname)
	args = []
	args.append(c['signzone_path'])
	args.extend(['-g','-r','/dev/urandom','-d',ksdir,'-o',domain])
	args.extend(['-f',newzone,'-k',ksk_keypath])
	if ksk2:
		args.extend(['-k',ksk2_keypath])
	args.extend([oldzone,zsk_keypath])
	logging.debug(str(args))
	code,out,err = utils.popen(args)
	logging.debug('signzone output: %s',out)
	if len(err) > 0:
		logging.warning('signzone error output: %s',err)
	if code != 0:
		logging.error("signzone error. return code: %d",code)
		logging.error(err)
		raise SignException("signzone failed")
	shutil.copyfile(newzone,dc['output_zonepath'])
	os.remove(oldzone)
	os.remove(newzone)
	args = []
	args.append(c['rndc_path'])
	args.extend(['reload',domain])
	logging.debug(str(args))
	code,out,err = utils.popen(args)
	logging.debug('rndc output: %s',out)
	if len(err) > 0:
		logging.warning('rndc error output: %s',err)
	if code != 0:
		logging.error("rndc error. return code: %d",code)
		logging.error(err)
		raise SignException("rndc failed")

def check_zsk_roll(domain):
	dc = conf.get(domain)
	ddb = db.get_ddb(domain)
	kdb = db.get_kdb(domain)
	
	ttl = int(dc['ttl'])
	sync_time = int(dc['sync_time'])
	zsk_life = int(dc['zsk_life'])
	now = utils.inttime()
	if ddb[inl.zsk_roll_stat] == inl.ZSK_STAT_NORMAL:
		zskname = ddb[inl.act_zsk]
		if zskname == None:
			raise SignException('no active ZSK found for ' + domain)
		zsk = kdb[zskname]
		if zsk.end_time < now + 2*(ttl+sync_time+10) \
			and ddb[inl.ksk_roll_stat] == inl.KSK_STAT_NORMAL:
			dea_zsks = ddb[inl.dea_zsks]
			if len(dea_zsks) > 0:
				topub_zsk = kdb[dea_zsks.pop()]
				ddb[inl.dea_zsks] = dea_zsks
			else:
				topub_zsk = zone.create_key(domain)
			topub_zsk.start_time = now - 1
			topub_zsk.active_time = now + (ttl+sync_time+10)
			topub_zsk.end_time = now + zsk_life
			kdb[topub_zsk.keyname] = topub_zsk
			ddb[inl.pub_zsk] = topub_zsk.keyname
			ddb[inl.zsk_roll_stat] = inl.ZSK_STAT_TOPUB
			ddb.sync()
			kdb.sync()
	if ddb[inl.zsk_roll_stat] == inl.ZSK_STAT_TOPUB:
		topub_key = kdb[ddb[inl.pub_zsk]]
		if topub_key.start_time < now:
			return inl.ZSK_STAT_TOPUB
	elif ddb[inl.zsk_roll_stat] == inl.ZSK_STAT_TOACT:
		toact_key = kdb[ddb[inl.pub_zsk]]
		if toact_key.active_time < now:
			return inl.ZSK_STAT_TOACT
	elif ddb[inl.zsk_roll_stat] == inl.ZSK_STAT_TODEL:
		todel_key = kdb[ddb[inl.del_zsk]]
		if todel_key.end_time < now:
			return inl.ZSK_STAT_TODEL
	return inl.ZSK_STAT_NORMAL


def check_ksk_roll(domain):
	dc = conf.get(domain)
	c = conf.get()
	ddb = db.get_ddb(domain)
	kdb = db.get_kdb(domain)

	ttl = int(dc['ttl'])
	sync_time = int(dc['sync_time'])
	now = utils.inttime()

	if ddb[inl.ksk_roll_stat] == inl.KSK_STAT_NORMAL:
		kskname = ddb[inl.act_ksk]
		if kskname == None:
			raise SignException("no active KSK found for " + domain)
		ksk = kdb[kskname]
		if ksk.end_time < now + 2*(ttl+sync_time+10):
			logging.warn("KSK of %s is too old, please roll it!!!", domain)
	if ddb[inl.ksk_roll_stat] == inl.KSK_STAT_TOPUB:
		topub_key = kdb[ddb[inl.pub_ksk]]
		if topub_key.start_time < now:
			return inl.KSK_STAT_TOPUB
	elif ddb[inl.ksk_roll_stat] == inl.KSK_STAT_TOACT:
		toact_key = kdb[ddb[inl.pub_ksk]]
		if toact_key.active_time < now:
			return inl.KSK_STAT_TOACT
	return inl.KSK_STAT_NORMAL

def check_chld_ksk_roll(domain):
	ddb = db.get_ddb(domain)
	if len(ddb[inl.wat_chld_ksks]) > 0:
		return inl.CHLD_KSK_STAT_TOPUB
	return inl.CHLD_KSK_STAT_NORMAL


def roll_zone(domain):
	ddb = db.get_ddb(domain)
	kdb = db.get_kdb(domain)
	dc = conf.get(domain)
	
	zsk_stat = check_zsk_roll(domain)
	ksk_stat = check_ksk_roll(domain)
	chld_ksk_stat = check_chld_ksk_roll(domain)
	
	last_sign_time = ddb[inl.last_sign_time]
	last_ip_mtime = ddb[inl.last_ip_mtime]

	ttl = int(dc['ttl'])
	now = utils.inttime()
	mtime = os.stat(dc['input_zonepath'])[stat.ST_MTIME]
	if (ttl+last_sign_time < now)\
		or ddb[inl.zf_last_mtime] < mtime \
		or last_ip_mtime > last_sign_time \
		or zsk_stat or ksk_stat or chld_ksk_stat:
		ddb[inl.zf_last_mtime] = mtime
		logging.debug("resigning is needed")
	else:
		logging.debug("resigning is not needed")
		return

	
	if zsk_stat == inl.ZSK_STAT_NORMAL:
		zsk = kdb[ddb[inl.act_zsk]]
		pub_zsk = None
	elif zsk_stat == inl.ZSK_STAT_TOPUB:
		zsk = kdb[ddb[inl.act_zsk]]
		pub_zsk = kdb[ddb[inl.pub_zsk]]
	elif zsk_stat == inl.ZSK_STAT_TOACT:
		try:
			pub_zsk = kdb[ddb[inl.act_zsk]]
		except KeyError:
			pub_zsk = None
		zsk = kdb[ddb[inl.pub_zsk]]
	elif zsk_stat == inl.ZSK_STAT_TODEL:
		pub_zsk = None
		zsk = kdb[ddb[inl.act_zsk]]

	if ksk_stat == inl.KSK_STAT_NORMAL:
		ksk = kdb[ddb[inl.act_ksk]]
		ksk2 = None
	elif ksk_stat == inl.KSK_STAT_TOPUB:
		ksk = kdb[ddb[inl.act_ksk]]
		ksk2 = kdb[ddb[inl.pub_ksk]]
	elif ksk_stat == inl.KSK_STAT_TOACT:
		ksk2 = None
		ksk = kdb[ddb[inl.pub_ksk]]

	chld_ksks = [ kdb[k] for k in ddb[inl.pub_chld_ksks]]
	chld_ksks.extend( [kdb[k] for k in ddb[inl.wat_chld_ksks]] )

	idb = db.get_idb(domain)
	ips = [ k for k in idb.values() if k.expired_time > now ]
	sign_zone(domain,ksk,zsk,chld_ksks,ksk2,pub_zsk,ips)

	if zsk_stat == inl.ZSK_STAT_TOPUB:
		pub_zsk.status = zone.KEY_PUBLISHED
		kdb[pub_zsk.keyname] = pub_zsk
		ddb[inl.zsk_roll_stat] = inl.ZSK_STAT_TOACT
	elif zsk_stat == inl.ZSK_STAT_TOACT:
		zsk.status = zone.KEY_ACTIVE
		pub_zsk.status = zone.KEY_TODEL
		kdb[zsk.keyname] = zsk
		ddb[inl.act_zsk] = zsk.keyname
		if pub_zsk:
			kdb[pub_zsk.keyname] = pub_zsk
			ddb[inl.del_zsk] = pub_zsk.keyname
			ddb[inl.pub_zsk] = None
			ddb[inl.zsk_roll_stat] = inl.ZSK_STAT_TODEL
		else:
			ddb[inl.zsk_roll_stat] = inl.ZSK_STAT_NORMAL
	elif zsk_stat == inl.ZSK_STAT_TODEL:
		kdb[ddb[inl.del_zsk]].remove_files()
		del kdb[ddb[inl.del_zsk]]
		ddb[inl.del_zsk] = None
		ddb[inl.zsk_roll_stat] = inl.ZSK_STAT_NORMAL
	
	if ksk_stat == inl.KSK_STAT_TOPUB:
		ksk2.status = zone.KEY_PUBLISHED
		kdb[ksk2.keyname] = ksk2
		ddb[inl.ksk_roll_stat] = inl.KSK_STAT_TOACT
	elif ksk_stat == inl.KSK_STAT_TOACT:
		ksk.status = zone.KEY_ACTIVE
		kdb[ksk.keyname] = ksk
		try:
			kdb[ddb[inl.act_ksk]].remove_files()
			del kdb[ddb[inl.act_ksk]]
		except:
			pass
		ddb[inl.act_ksk] = ksk.keyname
		ddb[inl.pub_ksk] = None
		ddb[inl.ksk_roll_stat] = inl.KSK_STAT_NORMAL
	
	if chld_ksk_stat == inl.CHLD_KSK_STAT_TOPUB:
		wats = ddb[inl.wat_chld_ksks]
		for key in chld_ksks:
			key.status = zone.KEY_PUBLISHED
			kdb[key.keyname] = key
			if key.keyname in wats: 
				wats.remove(key.keyname)
		ddb[inl.wat_chld_ksks] = wats
		ddb[inl.pub_chld_ksks] = [k.keyname for k in chld_ksks]
	
	ddb[inl.last_sign_time] = utils.inttime()
	ddb.sync()
	kdb.sync()

def main():
	try:
		utils.init()
		logging.info("start checking zones")
		domains = conf.getdomains()
		for domain in domains:
			try:
				logging.debug("start checking zone: %s",domain)
				dc = conf.get(domain)
				if dc['ns_server'] != 'yes':
					continue
				try:
					try:
						f = file(path.join(dc['dir'],conf.LOCK_FILE),'w')
						fcntl.lockf(f.fileno(),fcntl.LOCK_EX|fcntl.LOCK_NB)
					except:
						logging.info("can not lock file, skip it")
						continue
					roll_zone(domain)
				finally:
					fcntl.lockf(f.fileno(),fcntl.LOCK_UN)
					f.close()
			except SignException,e:
				logging.error(str(e))
			except Exception,e:
				logging.exception(e)
	finally:
		utils.final()

if __name__ == '__main__':
	main()
